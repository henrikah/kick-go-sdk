name: Main Release CI

permissions:
  contents: write

on:
  push:
    branches: [main]

jobs:
  build:
    name: Compiles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - run: go build ./...

  test:
    name: Run tests with race detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - run: go test -race ./...

  lint:
    name: Check linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: golangci/golangci-lint-action@v8
        with:
          version: latest
      - run: golangci-lint run ./...

  vet:
    name: Check vetting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - run: go vet ./...

  tidy:
    name: Check go.mod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Check go.mod is tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Check formatting
        run: |
          gofmt -s -d .
          test -z "$(gofmt -s -l .)"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test, lint, vet, tidy, fmt]
    steps:
      - uses: actions/checkout@v4
      - name: Read version from staging
        run: |
          VERSION=$(cat VERSION)
          VERSION_NO_BUILD=$(echo "$VERSION" | cut -d. -f1-3)
          echo "RELEASE_VERSION=$VERSION_NO_BUILD" >> $GITHUB_ENV
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
